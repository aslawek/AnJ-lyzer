# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\pyqt5_designer\AnJ-lyzer.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os

list_data = []

class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1000, 800)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.filelist_listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.filelist_listWidget.setGeometry(QtCore.QRect(10, 30, 485, 700))
        self.filelist_listWidget.setObjectName("filelist_listWidget")
        self.terminal_listView = QtWidgets.QListView(self.centralwidget)
        self.terminal_listView.setGeometry(QtCore.QRect(505, 580, 485, 150))
        self.terminal_listView.setObjectName("terminal_listView")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(20, 40, 160, 80))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1000, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.actionImport_Data = QtWidgets.QAction(MainWindow)
        self.actionImport_Data.triggered.connect(self.import_data)
        self.actionImport_Data.setObjectName("actionImport_Data")
        self.actionRecent_files = QtWidgets.QAction(MainWindow)
        self.actionRecent_files.setObjectName("actionRecent_files")
        self.actionSave_project = QtWidgets.QAction(MainWindow)
        self.actionSave_project.setObjectName("actionSave_project")
        self.actionSave_project_as = QtWidgets.QAction(MainWindow)
        self.actionSave_project_as.setObjectName("actionSave_project_as")
        self.actionExport = QtWidgets.QAction(MainWindow)
        self.actionExport.setObjectName("actionExport")
        self.actionClose = QtWidgets.QAction(MainWindow)
        self.actionClose.setObjectName("actionClose")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.menuFile.addAction(self.actionImport_Data)
        self.menuFile.addAction(self.actionRecent_files)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave_project)
        self.menuFile.addAction(self.actionSave_project_as)
        self.menuFile.addAction(self.actionExport)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionClose)
        self.menuFile.addAction(self.actionExit)
        self.menubar.addAction(self.menuFile.menuAction())
        self.toolBar.addAction(self.actionImport_Data)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def import_data(self):
        # Open a file dialog to select multiple files
        file_dialog = QtWidgets.QFileDialog()
        file_paths, _ = file_dialog.getOpenFileNames(None, "Select Files", "", "All Files (*)")

        if file_paths:
            # Once files are selected, print their paths
            print("Selected files:")
            for file_path in file_paths:
                print(file_path)

            # Example: Read data from each file using os module
            for file_path in file_paths:
                with open(file_path, 'r') as file:
                    data = file.read()
                    print("Data from file:", file_path)
                    #print(data)

    def update_list(self):
        pass

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.actionImport_Data.setText(_translate("MainWindow", "Import Data"))
        self.actionRecent_files.setText(_translate("MainWindow", "Recent files"))
        self.actionSave_project.setText(_translate("MainWindow", "Save project"))
        self.actionSave_project_as.setText(_translate("MainWindow", "Save project as..."))
        self.actionExport.setText(_translate("MainWindow", "Export..."))
        self.actionClose.setText(_translate("MainWindow", "Close"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
