# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\pyqt5_designer\to_do_list_w-database.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3

# Create a database or connect to one
conn = sqlite3.connect('mylist.db')
# Create a cursor
c = conn.cursor()

#Create a table
c.execute("""CREATE TABLE if not exists todo_list(
    list_item text)
    """)

# Commit the changes
conn.commit()

# Close our connection
conn.close()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(522, 487)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.addItem_pushButton = QtWidgets.QPushButton(self.centralwidget, clicked= lambda: self.add_it())
        self.addItem_pushButton.setGeometry(QtCore.QRect(10, 60, 121, 41))
        self.addItem_pushButton.setObjectName("addItem_pushButton")
        self.deleteItem_pushButton = QtWidgets.QPushButton(self.centralwidget, clicked= lambda: self.delete_it())
        self.deleteItem_pushButton.setGeometry(QtCore.QRect(140, 60, 121, 41))
        self.deleteItem_pushButton.setObjectName("deleteItem_pushButton")
        self.clearAll_pushButton = QtWidgets.QPushButton(self.centralwidget, clicked= lambda: self.clear_it())
        self.clearAll_pushButton.setGeometry(QtCore.QRect(270, 60, 121, 41))
        self.clearAll_pushButton.setObjectName("clearAll_pushButton")
        self.addItem_lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.addItem_lineEdit.setGeometry(QtCore.QRect(10, 10, 501, 41))
        self.addItem_lineEdit.setObjectName("addItem_lineEdit")
        self.myList_listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.myList_listWidget.setGeometry(QtCore.QRect(10, 110, 501, 331))
        self.myList_listWidget.setObjectName("myList_listWidget")
        self.saveToDatabase_pushButton = QtWidgets.QPushButton(self.centralwidget, clicked= lambda: self.save_it())
        self.saveToDatabase_pushButton.setGeometry(QtCore.QRect(400, 60, 111, 41))
        self.saveToDatabase_pushButton.setObjectName("saveToDatabase_pushButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 522, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Grabb all the items from database
        self.grab_all()

    # Grab data from database
    def grab_all(self):
        conn = sqlite3.connect('mylist.db')
        # Create a cursor
        c = conn.cursor()

        # Create a table
        c.execute("SELECT * FROM todo_list")
        records = c.fetchall()

        # Commit the changes
        conn.commit()

        # Close our connection
        conn.close()

        # Loop through record and add to screen
        for record in records:
            self.myList_listWidget.addItem(str(record[0]))

    # add item to list
    def add_it(self):
        # grab text from listbox
        item = self.addItem_lineEdit.text()
        # add item
        self.myList_listWidget.addItem(item)
        # clear the item box
        self.addItem_lineEdit.setText("")
        pass

    # add item to list
    def delete_it(self):
        # grab the selected/current row
        clicked_index = self.myList_listWidget.currentRow()
        self.myList_listWidget.takeItem(clicked_index)

    # add item to list
    def clear_it(self):
        self.myList_listWidget.clear()

    def save_it(self):
        # Create a database or connect to one
        conn = sqlite3.connect('mylist.db')
        # Create a cursor
        c = conn.cursor()

        # Delete everything in the database table
        c.execute('DELETE FROM todo_list;',)

        # create blank list to hold todo items
        items = []
        # loop through the list widget and pull out each item
        for index in range(self.myList_listWidget.count()):
            items.append(self.myList_listWidget.item(index))

        for item in items:
            # add stuff to the table
            c.execute("INSERT INTO todo_list VALUES (:item)",
                      {
                          'item': item.text(),
                      })

        # Commit the changes
        conn.commit()

        # Close our connection
        conn.close()

        # Pop up box
        msg = QtWidgets.QMessageBox()
        msg.setWindowTitle('Saved to Database!')
        msg.setText("Your Todo List Has Beed Saved!")
        msg.setIcon(QtWidgets.QMessageBox.Information)
        x = msg.exec_()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "To do list"))
        self.addItem_pushButton.setText(_translate("MainWindow", "Add Item"))
        self.deleteItem_pushButton.setText(_translate("MainWindow", "Delete Item"))
        self.clearAll_pushButton.setText(_translate("MainWindow", "Clear the List"))
        self.saveToDatabase_pushButton.setText(_translate("MainWindow", "Save to Database"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
